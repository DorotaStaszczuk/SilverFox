# Generated by Django 2.1.2 on 2018-10-04 08:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64)),
                ('file', models.ImageField(null=True, upload_to='')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('camera_name', models.IntegerField(choices=[(0, 'nie pamiętam'), (1, 'Fuji GW690III'), (2, 'Yashica T4'), (3, 'Konica Hexar AF'), (4, 'Nikon F2'), (5, 'Nikon FE'), (6, 'Zenit 12xp'), (7, 'Mamiya/Sekor DTL 100'), (8, 'Olympus miu'), (9, 'Pentax K1000'), (10, 'Canon AE-1'), (11, 'Plaubel Makina W67'), (12, 'Rollei 35 S'), (13, 'Contax G1/G2'), (14, 'Leica M6'), (15, 'Mamiya RZ67'), (16, 'Yashica Mat 124G'), (17, 'Zenza Bronica ETRS'), (18, 'Kiev 88'), (19, 'Pentacon Six TL'), (20, 'Pentax 67'), (21, 'Hasselblad 500C/M'), (22, 'Polaroid SX-70'), (23, 'Graflex Speed Graphic 4×5'), (24, 'inny')], default=0)),
                ('film_type', models.IntegerField(choices=[(8, 'błona cięta'), (3, '126'), (0, 'nie pamiętam'), (6, '120'), (10, 'inny'), (9, 'taśma filmowa'), (4, '135'), (2, 'APS/IX240'), (7, '220'), (5, '127'), (1, '110')], default=0)),
                ('film_name', models.IntegerField(choices=[(8, 'FOMA FOMAPAN R'), (5, 'FOMA FOMAPAN Classic'), (6, 'FOMA FOMAPAN Creative'), (10, 'FujiFilm Neopan Acros'), (13, 'Ilford FP4 Plus'), (16, 'Ilford SFX '), (11, 'Ilford Pan F Plus'), (14, 'Ilford Delta'), (7, 'FOMA FOMAPAN Action'), (9, 'FOMA RETROPAN soft'), (2, 'Adox CMS'), (15, 'Ilford XP2 Super'), (22, 'ORWO N plus'), (17, 'Kentmere'), (23, 'inny'), (0, 'nie pamiętam'), (18, 'Kodak TMX'), (20, 'Kodak TRX'), (19, 'Kodak TMY'), (1, 'Adox CHS'), (4, 'Film Washi W'), (3, 'Adox Silvermax'), (21, 'ORWO UN'), (12, 'Ilford HP5 Plus')], default=0)),
                ('film_iso', models.IntegerField(choices=[(2, '25'), (7, '200'), (9, '800'), (0, 'nie pamiętam'), (1, 'inny'), (11, '3200'), (12, '6400'), (6, '160'), (3, '50'), (10, '1600'), (8, '400'), (4, '64'), (5, '100')], default=0)),
                ('film_options', models.BooleanField(default=False)),
                ('description', models.TextField(null=True)),
                ('photo_options', models.BooleanField(default=False)),
                ('favourite', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('description', models.TextField(null=True)),
                ('profile_image', models.ImageField(null=True, upload_to='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='photo',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
